@using FinanceManagement.Shared
@using FinanceManagement.Client.ViewModels
@inject HttpClient Http

<div class="card">
    <div class="card-header">
        Add Expense
    </div>
    <div class="card-body">
        <EditForm Model="@expense" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="form-group">
                <label for="dateInput">Date</label>
                <InputDate class="form-control" id="dateInput" @bind-Value="expense.Date"/>
            </div>
            <div class="form-group">
                <label for="subjectInput">Subject</label>
                <InputText class="form-control" id="subjectInput" @bind-Value="expense.Subject"/>
            </div>
            <div class="form-group">
                <label for="categoryInput">Category</label>
                <InputSelect class="form-control" id="subjectInput" @bind-Value="expense.Category">
                    @{

                        foreach (var value in Enum.GetValues(typeof(ExpenseCategory)))
                        {
                            <option value="@value">@value</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="amountInput">Amount</label>
                <InputNumber class="form-control" id="amountInput" @bind-Value="expense.Amount"/>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Submit</button>
                <button type="submit" class="btn btn-primary" @onclick="Cancel">Cancel</button>
            </div>

        </EditForm>
    </div>
</div>
    

@code {
    [Parameter]
    public Expense expense { get; set; } = new Expense { Date = DateTime.Today };
    private ExpenseModel expenseModel = new ExpenseModel { Date = DateTime.Today };

    [Parameter]
    public EventCallback OnSubmitCallback { get; set; }

    private async void HandleValidSubmit()
    {
        if (expense?.Id != null)
        {
            await Http.PutAsJsonAsync<Expense?>($"Expenses/{expense?.Id}", expense);
        }
        else
        {
            await Http.PostAsJsonAsync<Expense?>("Expenses", expense);
        }

        expense = new Expense { Date = DateTime.Today };
        await OnSubmitCallback.InvokeAsync();
    }

    private void Cancel() => expense = new Expense { Date = DateTime.Today };
}

